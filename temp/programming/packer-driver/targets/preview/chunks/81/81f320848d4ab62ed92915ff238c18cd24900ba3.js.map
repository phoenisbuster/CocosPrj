{"version":3,"sources":["file:///Users/admin/CocosProjects/flappybird/flappybird-cocos/assets/Scripts/PipeSpawnControl.ts"],"names":["_decorator","Component","math","Node","UITransform","Vec3","GameController","ccclass","property","PipeSpawnControl","type","SetPipeSize","tempCount","Instance","canvas","getComponent","height","bird","topPipe","pipeHeightConfig","randomRange","topPipeCollision","bottomPipe","bottomPipeCollision","SetPipePostion","setPosition","horizonPositionConfig","screenHeight","ReSpawnPipe","groundController","currentTimeCount","active","RestartPipe","start","birdHeight","node","width"],"mappings":"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","sourcesContent":["import { _decorator, Canvas, Component, director, math, Node, random, UITransform, Vec3 } from 'cc';\nimport { GameController } from './GameController';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PipeSpawnControl')\nexport class PipeSpawnControl extends Component {\n    @property({ type: Node })\n    public topPipe: Node;\n    @property({ type: Node })\n    public bottomPipe: Node;\n\n    @property\n    public screenHeight: number;\n    @property\n    public pipeHeightConfig: number;\n    @property\n    private horizonPositionConfig: number;\n\n    @property\n    public topPipeCollision: number;\n    @property\n    public bottomPipeCollision: number;\n    @property\n    public birdHeight: number;\n    public SetPipeSize() {\n        let tempCount = (GameController.Instance().canvas.getComponent(UITransform).height / 2) - (GameController.Instance().bird.getComponent(UITransform).height / 2);\n        this.topPipe.getComponent(UITransform).height = (this.pipeHeightConfig / 2) + (math.randomRange(0, this.pipeHeightConfig / 2));\n        this.topPipeCollision = (tempCount - this.topPipe.getComponent(UITransform).height);\n        this.bottomPipe.getComponent(UITransform).height = (this.pipeHeightConfig / 2) + (math.randomRange(0, this.pipeHeightConfig / 2));\n        this.bottomPipeCollision = -(tempCount - this.bottomPipe.getComponent(UITransform).height);\n    }\n    public SetPipePostion() {\n        this.topPipe.setPosition(new Vec3(this.horizonPositionConfig, this.screenHeight, 0));\n        this.bottomPipe.setPosition(new Vec3(this.horizonPositionConfig, 0, 0));\n    }\n    public ReSpawnPipe() {\n        if (GameController.Instance().groundController.currentTimeCount <= 0) {\n            this.topPipe.active = true;\n            this.bottomPipe.active = true;\n        }\n        if (!this.topPipe.active || !this.bottomPipe)\n            return;\n        this.SetPipePostion();\n        this.SetPipeSize();\n    }\n    public RestartPipe() {\n        this.topPipe.active = false;\n        this.bottomPipe.active = false;\n    }\n    start() {\n        this.screenHeight = GameController.Instance().canvas.getComponent(UITransform).height;\n        this.birdHeight = GameController.Instance().bird.getComponent(UITransform).height;\n        this.pipeHeightConfig = (this.screenHeight / 2 - this.birdHeight);\n        this.horizonPositionConfig = this.node.getComponent(UITransform).width / 2;\n\n        this.SetPipeSize();\n        this.SetPipePostion();\n    }\n\n}\n\n\n"]}