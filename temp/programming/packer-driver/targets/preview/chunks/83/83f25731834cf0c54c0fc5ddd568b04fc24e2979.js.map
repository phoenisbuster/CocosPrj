{"version":3,"sources":["file:///Users/admin/CocosProjects/flappybird/flappybird-cocos/assets/Scripts/AdsManager/MyAdmod.ts"],"names":["_decorator","Component","director","log","warn","error","AdsData","RewardedAdClient","BannerSize","BannerClient","BannerSizeType","BottomCenter","ccclass","property","MyAdmod","type","interstitialAd","rewardedAd","bannerView","onLoad","instance","destroy","isPersistRootNode","node","addPersistRootNode","adsData","parseJson","_appId","_adUnitId_Rewarded","_adUnitId_Banner","start","initializeAdsComplete","onEnable","onDisable","initStatus","loadRewardedAd","self","load","onEarn","rewardType","amount","onAdImpression","onAdClicked","onAdShowedFullScreenContent","onAdDismissedFullScreenContent","onAdFailedToShowFullScreenContent","adError","showRewardedAd","show","loadBannerAd","onAdLoaded","Builtin","size","BANNER","alignments"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAsBC,MAAAA,S,OAAAA,S;AAEtBC,MAAAA,Q,OAAAA,Q;AAMAC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;;AAPXC,MAAAA,O,iBAAAA,O;;AAGAC,MAAAA,gB,iBAAAA,gB;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Y,iBAAAA,Y;;AAGAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;yBAGjBc,O,WADZF,OAAO,CAAC,SAAD,C,UASHC,QAAQ,CAAC;AACNE,QAAAA,IAAI;AAAA;AAAA;AADE,OAAD,C,sCATb,MACaD,OADb,SAC6Bb,SAD7B,CAEA;AAAA;AAAA;AAAA,eAGYe,cAHZ;AAAA,eAIYC,UAJZ;AAAA,eAKYC,UALZ;;AAAA;AAAA;;AAYcC,QAAAA,MAAM,GAChB;AAAA;;AACI,cAAGL,OAAO,CAACM,QAAR,IAAoB,IAApB,IAA4BN,OAAO,CAACM,QAAR,IAAoB,IAAnD,EACA;AACI,iBAAKC,OAAL;AACA;AACH;;AAED,cAAG,CAACnB,QAAQ,CAACoB,iBAAT,CAA2B,KAAKC,IAAhC,CAAJ,EACIrB,QAAQ,CAACsB,kBAAT,CAA4B,KAAKD,IAAjC;AACJT,UAAAA,OAAO,CAACM,QAAR,GAAmB,IAAnB;AACA,gCAAKK,OAAL,mCAAcC,SAAd;AAEAvB,UAAAA,GAAG,oBAAoB,KAAKsB,OAAL,CAAaE,MAAjC,EAAyC,KAAKF,OAAL,CAAaG,kBAAtD,EAA0E,KAAKH,OAAL,CAAaI,gBAAvF,CAAH;AACH;;AAESC,QAAAA,KAAK,GACf;AACI,eAAKC,qBAAL;AACH;;AAESC,QAAAA,QAAQ,GAClB,CAEC;;AAESC,QAAAA,SAAS,GACnB,CAEC;;AAEOF,QAAAA,qBAAqB,CAACG,UAAD,EAC7B;AAAA,cAD8BA,UAC9B;AAD8BA,YAAAA,UAC9B,GADmD,EACnD;AAAA;;AACG9B,UAAAA,IAAI,8BAA2B8B,UAA3B,SAAJ;AAEA,eAAKjB,UAAL,GAAkB;AAAA;AAAA,qDAAlB;AACA,eAAKC,UAAL,GAAkB;AAAA;AAAA,6CAAlB;AACA,eAAKiB,cAAL;AACF,SAlDL,CAoDI;;AACA;AACJ;AACA;;;AACWA,QAAAA,cAAc,GACrB;AACI,cAAG,KAAKlB,UAAL,IAAmB,IAAtB,EACA;AACI,iBAAKA,UAAL,GAAkB;AAAA;AAAA,uDAAlB;AACH;;AACD,cAAMmB,IAAI,GAAG,IAAb;AACA,eAAKnB,UAAL,CAAgBoB,IAAhB,CAAqB,KAAKZ,OAAL,CAAaG,kBAAlC,EAAsD;AAClD;AACAU,YAAAA,MAAM,CAACC,UAAD,EAAaC,MAAb,EAAqB;AACvBpC,cAAAA,IAAI,oCAAkCmC,UAAlC,mBAA0DC,MAA1D,CAAJ;AACH,aAJiD;;AAKlD;AACAC,YAAAA,cAAc,GAAG;AACbtC,cAAAA,GAAG,2BAAH;AACH,aARiD;;AASlD;AACAuC,YAAAA,WAAW,GAAG;AACVvC,cAAAA,GAAG,wBAAH;AACH,aAZiD;;AAalD;AACAwC,YAAAA,2BAA2B,GAAG;AAC1BxC,cAAAA,GAAG,wCAAH;AACA;AAChB;AACA;AACA;AACA;AACa,aArBiD;;AAsBlD;AACAyC,YAAAA,8BAA8B,GAAG;AAC7BxC,cAAAA,IAAI,2CAAJ;AACA;AAChB;AACA;AACA;AACA;;AACgBgC,cAAAA,IAAI,CAACD,cAAL;AACH,aA/BiD;;AAgClD;AACAU,YAAAA,iCAAiC,CAACC,OAAD,EAAmB;AAChDzC,cAAAA,KAAK,oCAAiCyC,OAAjC,SAAL;AACA;AAChB;AACA;AACA;AACA;;AACgBV,cAAAA,IAAI,CAACD,cAAL;AACH;;AAzCiD,WAAtD;AA2CH;AAED;AACJ;AACA;;;AACWY,QAAAA,cAAc,GACrB;AACI,cAAG,KAAK9B,UAAL,IAAmB,IAAtB,EACA;AACI,iBAAKA,UAAL,GAAkB;AAAA;AAAA,uDAAlB;AACH;;AACD,eAAKA,UAAL,CAAgB+B,IAAhB;AACH;AAED;AACJ;AACA;AACI;;;AACQV,QAAAA,MAAM,CAACC,UAAD,EAAaC,MAAb,EAAqB;AAC/BpC,UAAAA,IAAI,oCAAkCmC,UAAlC,mBAA0DC,MAA1D,CAAJ;AACH,SA9HL,CA+HI;;;AACQC,QAAAA,cAAc,GAAG;AACrBtC,UAAAA,GAAG,2BAAH;AACH,SAlIL,CAmII;;;AACQuC,QAAAA,WAAW,GAAG;AAClBvC,UAAAA,GAAG,wBAAH;AACH,SAtIL,CAuII;;;AACQwC,QAAAA,2BAA2B,GAAG;AAClCxC,UAAAA,GAAG,wCAAH;AACA;AACR;AACA;AACA;AACA;AACK,SA/IL,CAgJI;;;AACQyC,QAAAA,8BAA8B,GAAG;AACrCxC,UAAAA,IAAI,2CAAJ;AACA;AACR;AACA;AACA;AACA;;AACQ,eAAK+B,cAAL;AACH,SAzJL,CA0JI;;;AACQU,QAAAA,iCAAiC,CAACC,OAAD,EAAmB;AACxDzC,UAAAA,KAAK,oCAAiCyC,OAAjC,SAAL;AACA;AACR;AACA;AACA;AACA;;AACQ,eAAKX,cAAL;AACH,SAnKL,CAqKI;;AACA;AACJ;AACA;;;AACWc,QAAAA,YAAY,GACnB;AACI,cAAG,KAAK/B,UAAL,IAAmB,IAAtB,EACA;AACI,iBAAKA,UAAL,GAAkB;AAAA;AAAA,+CAAlB;AACH;;AACD,cAAMkB,IAAI,GAAG,IAAb;AACA,eAAKlB,UAAL,CAAgBmB,IAAhB,CAAqB,KAAKZ,OAAL,CAAaI,gBAAlC,EAAoD;AAChDqB,YAAAA,UAAU,GAAG;AACTd,cAAAA,IAAI,CAAClB,UAAL,CAAgB8B,IAAhB,CAAqB,IAArB;AACH;;AAH+C,WAApD,EAIG;AACCjC,YAAAA,IAAI,EAAE;AAAA;AAAA,kDAAeoC,OADtB;AAECC,YAAAA,IAAI,EAAE;AAAA;AAAA,0CAAWC,MAFlB;AAGCC,YAAAA,UAAU;AAAA;AAAA;AAHX,WAJH;AASH;;AAzLL,O,UACkBlC,Q;;;;;iBASa;AAAA;AAAA,mC","sourcesContent":["import { _decorator, CCString, Component, Node } from 'cc';\nimport { AdsData } from './AdsData';\nimport { director } from 'cc';\nimport { InterstitialAdClient } from 'db://admob/ads/client/InterstitialAdClient';\nimport { RewardedAdClient } from 'db://admob/ads/client/RewardedAdClient';\nimport { BannerSize } from 'db://admob/misc/BannerSize';\nimport { BannerClient } from 'db://admob/ads/client/BannerClient';\nimport { AdError, LoadAdError } from 'db://admob/ads/alias/TypeAlias';\nimport { log, warn, error } from 'cc';\nimport { BannerSizeType } from 'db://admob/misc/BannerSizeType';\nimport { BottomCenter } from 'db://admob/misc/BannerAlignment';\nimport { native } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('MyAdmod')\nexport class MyAdmod extends Component \n{\n    public static instance: MyAdmod;\n\n    private interstitialAd: InterstitialAdClient;\n    private rewardedAd: RewardedAdClient;\n    private bannerView: BannerClient;\n\n    @property({\n        type: AdsData\n    })\n    private adsData: AdsData = new AdsData();\n\n    protected onLoad(): void \n    {\n        if(MyAdmod.instance != null && MyAdmod.instance != this)\n        {\n            this.destroy();\n            return;\n        }\n\n        if(!director.isPersistRootNode(this.node))\n            director.addPersistRootNode(this.node);\n        MyAdmod.instance = this;\n        this.adsData?.parseJson();\n        \n        log(`MyAdmob: onLoad`, this.adsData._appId, this.adsData._adUnitId_Rewarded, this.adsData._adUnitId_Banner);\n    }\n\n    protected start(): void \n    {\n        this.initializeAdsComplete();\n    }\n\n    protected onEnable(): void \n    {\n       \n    }\n\n    protected onDisable(): void \n    {\n        \n    }\n\n    private initializeAdsComplete(initStatus: string = \"\") \n    {\n       warn(`MyAdmob: initStatus = \"${initStatus}\" `);\n\n       this.rewardedAd = new RewardedAdClient();\n       this.bannerView = new BannerClient();\n       this.loadRewardedAd();\n    }\n\n    //=================================================== RewardAd ===================================================//\n    /*\n        Load RewardedAd\n    */\n    public loadRewardedAd()\n    {\n        if(this.rewardedAd == null)\n        {\n            this.rewardedAd = new RewardedAdClient();\n        }\n        const self = this;\n        this.rewardedAd.load(this.adsData._adUnitId_Rewarded, {\n            // Raised when the ad is estimated to have earned money.\n            onEarn(rewardType, amount) {\n                warn(`MyAdmob: onEarn, rewardType = ${rewardType}, amount = ${amount}`);\n            },\n            // Raised when an impression is recorded for an ad.\n            onAdImpression() {\n                log(`MyAdmob: onAdImpression`);\n            },\n            // Raised when a click is recorded for an ad.\n            onAdClicked() {\n                log(`MyAdmob: onAdClicked`);\n            },\n            // Raised when an ad opened full screen content.\n            onAdShowedFullScreenContent() {\n                log(`MyAdmob: onAdShowedFullScreenContent`);\n                /*\n                    Ads is fully opened\n                    TODO: What your game should do when the ad is fully opened\n                    Ex: Turn off sound, pause the game, ...\n                */\n            },\n            // Raised when the ad closed full screen content.\n            onAdDismissedFullScreenContent() {\n                warn(`MyAdmob: onAdDismissedFullScreenContent`);\n                /*\n                    Ads is closed\n                    TODO: What your game should do when the ad is closed\n                    Ex: Turn on sound, resume the game, load new ads, ...\n                */\n                self.loadRewardedAd();\n            },\n            // Raised when the ad failed to open full screen content.\n            onAdFailedToShowFullScreenContent(adError: AdError) {\n                error(`MyAdmob: onAdFailedToLoad = \"${adError}\" `);\n                /*\n                    Ads load failed\n                    TODO: What your game should do when the ads load failed\n                    Ex: Notify the user, load new ads, ...\n                */\n                self.loadRewardedAd();\n            },\n        });\n    }\n\n    /*\n        Show RewardedAd\n    */\n    public showRewardedAd()\n    {\n        if(this.rewardedAd == null)\n        {\n            this.rewardedAd = new RewardedAdClient();\n        }\n        this.rewardedAd.show();\n    }\n\n    /*\n        RewardedAd event listener\n    */\n    // Raised when the ad is estimated to have earned money.\n    private onEarn(rewardType, amount) {\n        warn(`MyAdmob: onEarn, rewardType = ${rewardType}, amount = ${amount}`);\n    }\n    // Raised when an impression is recorded for an ad.\n    private onAdImpression() {\n        log(`MyAdmob: onAdImpression`);\n    }\n    // Raised when a click is recorded for an ad.\n    private onAdClicked() {\n        log(`MyAdmob: onAdClicked`);\n    }\n    // Raised when an ad opened full screen content.\n    private onAdShowedFullScreenContent() {\n        log(`MyAdmob: onAdShowedFullScreenContent`);\n        /*\n            Ads is fully opened\n            TODO: What your game should do when the ad is fully opened\n            Ex: Turn off sound, pause the game, ...\n        */\n    }\n    // Raised when the ad closed full screen content.\n    private onAdDismissedFullScreenContent() {\n        warn(`MyAdmob: onAdDismissedFullScreenContent`);\n        /*\n            Ads is closed\n            TODO: What your game should do when the ad is closed\n            Ex: Turn on sound, resume the game, load new ads, ...\n        */\n        this.loadRewardedAd();\n    }\n    // Raised when the ad failed to open full screen content.\n    private onAdFailedToShowFullScreenContent(adError: AdError) {\n        error(`MyAdmob: onAdFailedToLoad = \"${adError}\" `);\n        /*\n            Ads load failed\n            TODO: What your game should do when the ads load failed\n            Ex: Notify the user, load new ads, ...\n        */\n        this.loadRewardedAd();\n    }\n\n    //=================================================== BannerAd ===================================================//\n    /*\n        Load BannerAd\n    */\n    public loadBannerAd()\n    {\n        if(this.bannerView == null)\n        {\n            this.bannerView = new BannerClient();\n        }\n        const self = this;\n        this.bannerView.load(this.adsData._adUnitId_Banner, {\n            onAdLoaded() {\n                self.bannerView.show(true);\n            },\n        }, {\n            type: BannerSizeType.Builtin,\n            size: BannerSize.BANNER,\n            alignments: BottomCenter\n        });\n    }\n}\n\n"]}