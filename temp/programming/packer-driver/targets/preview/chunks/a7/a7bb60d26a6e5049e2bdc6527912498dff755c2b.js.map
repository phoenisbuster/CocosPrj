{"version":3,"sources":["file:///Users/admin/CocosProjects/flappybird/flappybird-cocos/assets/Scripts/GroundController.ts"],"names":["_decorator","Component","Node","UITransform","Vec3","Enum","CCFloat","GameController","ccclass","property","EEndground","GroundController","type","currentEndGround","groundWidth","ground1Vec","ground2Vec","ground3Vec","isStartGame","start","RestartGround","value","Ground1","getComponent","width","Instance","screenHeight","ground3","positionDetectCollision","canvas","bird","positionEndDetectCollision","GroundPositionChanges","currentTimeCount","timeCountStartGame","update","deltaTime","RunGround","CheckBirdCollisionWidthPipe","CheckScore","CheckGroundReturn","x","currentGroundSccoreCheck","ground1","topPipe","active","PlusSocre","ground2","currentBirdPosition","node","position","y","topPipeCollision","bottomPipeCollision","GameOver","currentScore","inGameScoreLabel","string","toString","groundSpeed","setPosition","Ground2","Ground3","getVec","GetEndGround","ReSpawnPipe","none"],"mappings":"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","sourcesContent":["import { _decorator, Canvas, Component, Node, UITransform, Vec3, Enum, CCFloat } from 'cc';\nimport { GameController } from './GameController';\n// import { GameController } from './GameController';\nconst { ccclass, property } = _decorator;\nenum EEndground {\n    none,\n    ground1,\n    ground2,\n    ground3,\n}\n@ccclass('GroundController')\nexport class GroundController extends Component \n{\n    @property({ type: Node })\n    public Ground1: Node;\n\n    @property({ type: Node })\n    public Ground2: Node;\n\n    @property({ type: Node })\n    public Ground3: Node;\n\n    @property({ type: CCFloat })\n    public groundSpeed: number = 50;\n\n    currentEndGround: EEndground;\n    private groundWidth: number;\n    private ground1Vec: Vec3;\n    private ground2Vec: Vec3;\n    private ground3Vec: Vec3;\n\n    /// bottom pipe = chiều cao màn hình / 2 sau đó \"trừ\" chiều cao của bottom height sau đó \"trừ\" (chiều cao của bird / 2) ====> là khoảng gới hạn dưới mà bird có thể bay ==> ví dụ giưới hạn là -45 thì khi bird > -45 sẽ là va chạm.\n    /// top pipe tương tự như vậy nhưng là số dương\n    @property(CCFloat)\n    public positionDetectCollision: number;\n    @property(CCFloat)\n    public positionEndDetectCollision: number;\n    @property(CCFloat)\n    public currentTimeCount: number = 0;\n    @property({\n        type: Enum(EEndground)\n    })\n    public lastGroundSccoreCheck: EEndground = EEndground.none;\n    @property({\n        type: Enum(EEndground)\n    })\n    public currentGroundSccoreCheck: EEndground = EEndground.none;\n\n    private isStartGame: boolean = false;\n    \n    start() \n    {\n        this.RestartGround(false);\n    }\n\n    public RestartGround(value: boolean) \n    {\n        this.groundWidth = this.Ground1.getComponent(UITransform).width;\n        this.ground1Vec = new Vec3(0, -(GameController.Instance().screenHeight / 2), 0);\n        this.ground2Vec = new Vec3(this.groundWidth, -(GameController.Instance().screenHeight / 2), 0);\n        this.ground3Vec = new Vec3(this.groundWidth * 2, -(GameController.Instance().screenHeight / 2), 0);\n        this.currentEndGround = EEndground.ground3;\n        this.positionDetectCollision = (GameController.Instance().canvas.getComponent(UITransform).width / 2) - (this.groundWidth / 2) + (GameController.Instance().bird.getComponent(UITransform).width);\n        this.positionEndDetectCollision = this.positionDetectCollision - ((GameController.Instance().bird.getComponent(UITransform).width * 2) - 20);\n        this.GroundPositionChanges();\n        this.currentTimeCount = GameController.Instance().timeCountStartGame;\n\n        this.isStartGame = value;\n    }\n\n    update(deltaTime: number) \n    {\n        if (!this.isStartGame)\n            return;\n\n        this.RunGround(deltaTime);\n        if (this.currentTimeCount >= 0) {\n            this.currentTimeCount -= deltaTime;\n        }\n        else {\n            this.CheckBirdCollisionWidthPipe();\n        }\n        this.CheckScore();\n        this.CheckGroundReturn();\n        this.GroundPositionChanges();\n\n    }\n\n    CheckScore() {\n        if (this.ground1Vec.x < this.positionDetectCollision - GameController.Instance().bird.getComponent(UITransform).width && this.ground1Vec.x > 0 && this.currentGroundSccoreCheck != EEndground.ground1) {\n            if (!GameController.Instance().ground1.topPipe.active)\n                return;\n            this.currentGroundSccoreCheck = EEndground.ground1;\n            this.PlusSocre();\n        }\n        if (this.ground2Vec.x < this.positionDetectCollision - GameController.Instance().bird.getComponent(UITransform).width && this.ground2Vec.x > 0 && this.currentGroundSccoreCheck != EEndground.ground2) {\n            if (!GameController.Instance().ground2.topPipe.active)\n                return;\n            this.currentGroundSccoreCheck = EEndground.ground2;\n            this.PlusSocre();\n        }\n        if (this.ground3Vec.x < this.positionDetectCollision - GameController.Instance().bird.getComponent(UITransform).width && this.ground3Vec.x > 0 && this.currentGroundSccoreCheck != EEndground.ground3) {\n            if (!GameController.Instance().ground3.topPipe.active)\n                return;\n            this.currentGroundSccoreCheck = EEndground.ground3;\n            this.PlusSocre();\n        }\n    }\n\n    CheckBirdCollisionWidthPipe() {\n        if (this.ground1Vec.x < this.positionDetectCollision && this.ground1Vec.x > this.positionEndDetectCollision) {\n            if (!GameController.Instance().ground1.topPipe.active)\n                return;\n            let currentBirdPosition = GameController.Instance().bird.node.position;\n            if (currentBirdPosition.y > GameController.Instance().ground1.topPipeCollision || currentBirdPosition.y < GameController.Instance().ground1.bottomPipeCollision)\n                GameController.Instance().GameOver();\n        }\n\n        if (this.ground2Vec.x < this.positionDetectCollision && this.ground2Vec.x > this.positionEndDetectCollision) {\n            if (!GameController.Instance().ground2.topPipe.active)\n                return;\n            let currentBirdPosition = GameController.Instance().bird.node.position;\n            if (currentBirdPosition.y > GameController.Instance().ground2.topPipeCollision || currentBirdPosition.y < GameController.Instance().ground2.bottomPipeCollision)\n                GameController.Instance().GameOver();\n        }\n\n        if (this.ground3Vec.x < this.positionDetectCollision && this.ground3Vec.x > this.positionEndDetectCollision) {\n            if (!GameController.Instance().ground3.topPipe.active)\n                return;\n            let currentBirdPosition = GameController.Instance().bird.node.position;\n            if (currentBirdPosition.y > GameController.Instance().ground3.topPipeCollision || currentBirdPosition.y < GameController.Instance().ground3.bottomPipeCollision)\n                GameController.Instance().GameOver();\n        }\n    }\n    PlusSocre() {\n        GameController.Instance().currentScore += 1;\n        GameController.Instance().inGameScoreLabel.string = GameController.Instance().currentScore.toString();\n    }\n\n    RunGround(deltaTime: number) {\n        this.ground1Vec.x -= deltaTime * this.groundSpeed;\n        this.ground2Vec.x -= deltaTime * this.groundSpeed;\n        this.ground3Vec.x -= deltaTime * this.groundSpeed;\n    }\n    GroundPositionChanges() {\n        this.Ground1.setPosition(this.ground1Vec);\n        this.Ground2.setPosition(this.ground2Vec);\n        this.Ground3.setPosition(this.ground3Vec);\n    }\n    CheckGroundReturn() {\n        let getVec = this.GetEndGround();\n        if (this.ground1Vec.x < -(0 + this.groundWidth)) {\n            this.ground1Vec.x = getVec.x + this.groundWidth;\n            this.currentEndGround = EEndground.ground1;\n            GameController.Instance().ground1.ReSpawnPipe();\n        }\n        if (this.ground2Vec.x < -(0 + this.groundWidth)) {\n            this.ground2Vec.x = getVec.x + this.groundWidth;\n            this.currentEndGround = EEndground.ground2;\n            GameController.Instance().ground2.ReSpawnPipe();\n        }\n        if (this.ground3Vec.x < -(0 + this.groundWidth)) {\n            this.ground3Vec.x = getVec.x + this.groundWidth;\n            this.currentEndGround = EEndground.ground3;\n            GameController.Instance().ground3.ReSpawnPipe();\n        }\n    }\n\n    GetEndGround(): Vec3 {\n        switch (this.currentEndGround) {\n            case EEndground.ground1:\n                return this.ground1Vec;\n            case EEndground.ground2:\n                return this.ground2Vec;\n            case EEndground.ground3:\n                return this.ground3Vec;\n        }\n    }\n}\n\n\n"]}